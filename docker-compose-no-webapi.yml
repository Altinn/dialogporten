version: '3.9'

services:
  dialogporten-postgres:
    image: postgres:15.4
    restart: always
    command: postgres -c wal_level=logical
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 2s
      timeout: 20s
      retries: 5

  dialogporten-migrations:
    build:
      context: .
      dockerfile: src/Digdir.Domain.Dialogporten.Infrastructure/MigrationBundle.dockerfile
    environment:
      - Infrastructure__DialogDbConnectionString=${DB_CONNECTION_STRING}
    depends_on:
      dialogporten-postgres:
        condition: service_healthy
    restart: "no"  

  dialogporten-redis:
    image: redis:6.0-alpine
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  dialogporten-service:
    build:
      context: .
      dockerfile: src/Digdir.Domain.Dialogporten.Service/Dockerfile
    restart: always
    depends_on:
      dialogporten-postgres:
        condition: service_healthy
    environment:
      - Infrastructure:DialogDbConnectionString=${DB_CONNECTION_STRING}
      - ASPNETCORE_ENVIRONMENT=Development
  
  dialogporten-cdc:
    build:
      context: .
      dockerfile: src/Digdir.Domain.Dialogporten.ChangeDataCapture/Dockerfile
    restart: always
    depends_on:
      dialogporten-postgres:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Infrastructure:DialogDbConnectionString=${DB_CONNECTION_STRING}
      - ReplicationSlotName=outboxmessage_replication_slot
      - PublicationName=outboxmessage_publication
      - TableName=OutboxMessage
