// <auto-generated />
using System;
using Digdir.Domain.Dialogporten.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Digdir.Domain.Dialogporten.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DialogDbContext))]
    partial class DialogDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Actors.Actor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ActorId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ActorName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ActorTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp at time zone 'utc'");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp at time zone 'utc'");

                    b.HasKey("Id");

                    b.HasIndex("ActorTypeId");

                    b.ToTable("Actor");

                    b.HasDiscriminator().HasValue("Actor");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Actors.ActorType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("ActorType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "PartyRepresentative"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ServiceOwner"
                        });
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Attachments.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp at time zone 'utc'");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp at time zone 'utc'");

                    b.HasKey("Id");

                    b.ToTable("Attachment");

                    b.HasDiscriminator().HasValue("Attachment");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Attachments.AttachmentUrl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uuid");

                    b.Property<int>("ConsumerTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp at time zone 'utc'");

                    b.Property<string>("MediaType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp at time zone 'utc'");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1023)
                        .HasColumnType("character varying(1023)");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("ConsumerTypeId");

                    b.ToTable("AttachmentUrl");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Attachments.AttachmentUrlConsumerType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("AttachmentUrlConsumerType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Gui"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Api"
                        });
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Actions.DialogApiAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("AuthorizationAttribute")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp at time zone 'utc'");

                    b.Property<Guid>("DialogId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp at time zone 'utc'");

                    b.HasKey("Id");

                    b.HasIndex("DialogId");

                    b.ToTable("DialogApiAction");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Actions.DialogApiActionEndpoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ActionId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp at time zone 'utc'");

                    b.Property<bool>("Deprecated")
                        .HasColumnType("boolean");

                    b.Property<string>("DocumentationUrl")
                        .HasMaxLength(1023)
                        .HasColumnType("character varying(1023)");

                    b.Property<int>("HttpMethodId")
                        .HasColumnType("integer");

                    b.Property<string>("RequestSchema")
                        .HasMaxLength(1023)
                        .HasColumnType("character varying(1023)");

                    b.Property<string>("ResponseSchema")
                        .HasMaxLength(1023)
                        .HasColumnType("character varying(1023)");

                    b.Property<DateTimeOffset?>("SunsetAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp at time zone 'utc'");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1023)
                        .HasColumnType("character varying(1023)");

                    b.Property<string>("Version")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("HttpMethodId");

                    b.ToTable("DialogApiActionEndpoint");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Actions.DialogGuiAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("AuthorizationAttribute")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp at time zone 'utc'");

                    b.Property<Guid>("DialogId")
                        .HasColumnType("uuid");

                    b.Property<int>("HttpMethodId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleteDialogAction")
                        .HasColumnType("boolean");

                    b.Property<int>("PriorityId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp at time zone 'utc'");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1023)
                        .HasColumnType("character varying(1023)");

                    b.HasKey("Id");

                    b.HasIndex("DialogId");

                    b.HasIndex("HttpMethodId");

                    b.HasIndex("PriorityId");

                    b.ToTable("DialogGuiAction");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Actions.DialogGuiActionPriority", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("DialogGuiActionPriority");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Primary"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Secondary"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tertiary"
                        });
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Activities.DialogActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp at time zone 'utc'");

                    b.Property<Guid>("DialogId")
                        .HasColumnType("uuid");

                    b.Property<string>("ExtendedType")
                        .HasMaxLength(1023)
                        .HasColumnType("character varying(1023)");

                    b.Property<Guid?>("RelatedActivityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TransmissionId")
                        .HasColumnType("uuid");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DialogId");

                    b.HasIndex("RelatedActivityId");

                    b.HasIndex("TransmissionId");

                    b.HasIndex("TypeId");

                    b.ToTable("DialogActivity");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Activities.DialogActivityType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("DialogActivityType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "DialogCreated"
                        },
                        new
                        {
                            Id = 2,
                            Name = "DialogClosed"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Information"
                        },
                        new
                        {
                            Id = 4,
                            Name = "TransmissionOpened"
                        },
                        new
                        {
                            Id = 5,
                            Name = "PaymentMade"
                        },
                        new
                        {
                            Id = 6,
                            Name = "SignatureProvided"
                        });
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Contents.DialogContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp at time zone 'utc'");

                    b.Property<Guid>("DialogId")
                        .HasColumnType("uuid");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp at time zone 'utc'");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.HasIndex("DialogId", "TypeId")
                        .IsUnique();

                    b.ToTable("DialogContent");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Contents.DialogContentType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string[]>("AllowedMediaTypes")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("MaxLength")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("OutputInList")
                        .HasColumnType("boolean");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("DialogContentType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllowedMediaTypes = new[] { "text/plain" },
                            MaxLength = 255,
                            Name = "Title",
                            OutputInList = true,
                            Required = true
                        },
                        new
                        {
                            Id = 2,
                            AllowedMediaTypes = new[] { "text/plain" },
                            MaxLength = 255,
                            Name = "SenderName",
                            OutputInList = true,
                            Required = false
                        },
                        new
                        {
                            Id = 3,
                            AllowedMediaTypes = new[] { "text/plain" },
                            MaxLength = 255,
                            Name = "Summary",
                            OutputInList = true,
                            Required = true
                        },
                        new
                        {
                            Id = 4,
                            AllowedMediaTypes = new[] { "text/html", "text/plain", "text/markdown" },
                            MaxLength = 1023,
                            Name = "AdditionalInfo",
                            OutputInList = false,
                            Required = false
                        },
                        new
                        {
                            Id = 5,
                            AllowedMediaTypes = new[] { "text/plain" },
                            MaxLength = 20,
                            Name = "ExtendedStatus",
                            OutputInList = true,
                            Required = false
                        },
                        new
                        {
                            Id = 6,
                            AllowedMediaTypes = new[] { "application/vnd.dialogporten.frontchannelembed+json;type=markdown" },
                            MaxLength = 1023,
                            Name = "MainContentReference",
                            OutputInList = false,
                            Required = false
                        });
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.DialogEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp at time zone 'utc'");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DueAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExtendedStatus")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ExternalReference")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Org")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("C");

                    b.Property<string>("Party")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("C");

                    b.Property<int?>("Progress")
                        .HasColumnType("integer");

                    b.Property<Guid>("Revision")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ServiceResource")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("C");

                    b.Property<string>("ServiceResourceType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp at time zone 'utc'");

                    b.Property<DateTimeOffset?>("VisibleFrom")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DueAt");

                    b.HasIndex("Org");

                    b.HasIndex("Party");

                    b.HasIndex("ServiceResource");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("Dialog", (string)null);
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.DialogSearchTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp at time zone 'utc'");

                    b.Property<Guid>("DialogId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("character varying(63)");

                    b.HasKey("Id");

                    b.HasIndex("DialogId", "Value")
                        .IsUnique();

                    b.ToTable("DialogSearchTag");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.DialogSeenLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp at time zone 'utc'");

                    b.Property<Guid>("DialogId")
                        .HasColumnType("uuid");

                    b.Property<int>("EndUserTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsViaServiceOwner")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DialogId");

                    b.HasIndex("EndUserTypeId");

                    b.ToTable("DialogSeenLog");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.DialogStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("DialogStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "New"
                        },
                        new
                        {
                            Id = 2,
                            Name = "InProgress"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Signing"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Processing"
                        },
                        new
                        {
                            Id = 5,
                            Name = "RequiresAttention"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Completed"
                        });
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.DialogUserType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("DialogUserType");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Unknown"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Person"
                        },
                        new
                        {
                            Id = 2,
                            Name = "LegacySystemUser"
                        },
                        new
                        {
                            Id = 3,
                            Name = "SystemUser"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ServiceOwner"
                        },
                        new
                        {
                            Id = 5,
                            Name = "ServiceOwnerOnBehalfOfPerson"
                        });
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Transmissions.Contents.DialogTransmissionContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp at time zone 'utc'");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("TransmissionId")
                        .HasColumnType("uuid");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp at time zone 'utc'");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.HasIndex("TransmissionId", "TypeId")
                        .IsUnique();

                    b.ToTable("DialogTransmissionContent");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Transmissions.Contents.DialogTransmissionContentType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string[]>("AllowedMediaTypes")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("MaxLength")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("DialogTransmissionContentType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllowedMediaTypes = new[] { "text/plain" },
                            MaxLength = 255,
                            Name = "Title",
                            Required = true
                        },
                        new
                        {
                            Id = 2,
                            AllowedMediaTypes = new[] { "text/plain" },
                            MaxLength = 255,
                            Name = "Summary",
                            Required = true
                        });
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Transmissions.DialogTransmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AuthorizationAttribute")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp at time zone 'utc'");

                    b.Property<Guid>("DialogId")
                        .HasColumnType("uuid");

                    b.Property<string>("ExtendedType")
                        .HasMaxLength(1023)
                        .HasColumnType("character varying(1023)");

                    b.Property<Guid?>("RelatedTransmissionId")
                        .HasColumnType("uuid");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DialogId");

                    b.HasIndex("RelatedTransmissionId");

                    b.HasIndex("TypeId");

                    b.ToTable("DialogTransmission");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Transmissions.DialogTransmissionType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("DialogTransmissionType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Information"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Acceptance"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Rejection"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Request"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Alert"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Decision"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Submission"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Correction"
                        });
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Http.HttpVerb", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("HttpVerb");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "GET"
                        },
                        new
                        {
                            Id = 2,
                            Name = "POST"
                        },
                        new
                        {
                            Id = 3,
                            Name = "PUT"
                        },
                        new
                        {
                            Id = 4,
                            Name = "PATCH"
                        },
                        new
                        {
                            Id = 5,
                            Name = "DELETE"
                        },
                        new
                        {
                            Id = 6,
                            Name = "HEAD"
                        },
                        new
                        {
                            Id = 7,
                            Name = "OPTIONS"
                        },
                        new
                        {
                            Id = 8,
                            Name = "TRACE"
                        },
                        new
                        {
                            Id = 9,
                            Name = "CONNECT"
                        });
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Localizations.Localization", b =>
                {
                    b.Property<Guid>("LocalizationSetId")
                        .HasColumnType("uuid");

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp at time zone 'utc'");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp at time zone 'utc'");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(4095)
                        .HasColumnType("character varying(4095)");

                    b.HasKey("LocalizationSetId", "LanguageCode");

                    b.ToTable("Localization");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Localizations.LocalizationSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp at time zone 'utc'");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("LocalizationSet");

                    b.HasDiscriminator().HasValue("LocalizationSet");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Outboxes.OutboxMessage", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CorrelationId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp at time zone 'utc'");

                    b.Property<string>("EventPayload")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("EventId");

                    b.ToTable("OutboxMessage");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Outboxes.OutboxMessageConsumer", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConsumerName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("EventId", "ConsumerName");

                    b.ToTable("OutboxMessageConsumer");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.SubjectResources.SubjectResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp at time zone 'utc'");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp at time zone 'utc'");

                    b.HasKey("Id");

                    b.HasIndex("Resource", "Subject")
                        .IsUnique();

                    b.ToTable("SubjectResource", (string)null);
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.SubjectResources.SubjectResourceLastUpdate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SubjectResourceLastUpdate", (string)null);
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Activities.DialogActivityPerformedByActor", b =>
                {
                    b.HasBaseType("Digdir.Domain.Dialogporten.Domain.Actors.Actor");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uuid");

                    b.HasIndex("ActivityId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("DialogActivityPerformedByActor");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.DialogSeenLogSeenByActor", b =>
                {
                    b.HasBaseType("Digdir.Domain.Dialogporten.Domain.Actors.Actor");

                    b.Property<Guid>("DialogSeenLogId")
                        .HasColumnType("uuid");

                    b.HasIndex("DialogSeenLogId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("DialogSeenLogSeenByActor");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Transmissions.DialogTransmissionSenderActor", b =>
                {
                    b.HasBaseType("Digdir.Domain.Dialogporten.Domain.Actors.Actor");

                    b.Property<Guid>("TransmissionId")
                        .HasColumnType("uuid");

                    b.HasIndex("TransmissionId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("DialogTransmissionSenderActor");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.DialogAttachment", b =>
                {
                    b.HasBaseType("Digdir.Domain.Dialogporten.Domain.Attachments.Attachment");

                    b.Property<Guid>("DialogId")
                        .HasColumnType("uuid");

                    b.HasIndex("DialogId");

                    b.HasDiscriminator().HasValue("DialogAttachment");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Transmissions.DialogTransmissionAttachment", b =>
                {
                    b.HasBaseType("Digdir.Domain.Dialogporten.Domain.Attachments.Attachment");

                    b.Property<Guid>("TransmissionId")
                        .HasColumnType("uuid");

                    b.HasIndex("TransmissionId");

                    b.HasDiscriminator().HasValue("DialogTransmissionAttachment");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Attachments.AttachmentDisplayName", b =>
                {
                    b.HasBaseType("Digdir.Domain.Dialogporten.Domain.Localizations.LocalizationSet");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uuid");

                    b.HasIndex("AttachmentId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("AttachmentDisplayName");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Actions.DialogGuiActionPrompt", b =>
                {
                    b.HasBaseType("Digdir.Domain.Dialogporten.Domain.Localizations.LocalizationSet");

                    b.Property<Guid>("GuiActionId")
                        .HasColumnType("uuid");

                    b.HasIndex("GuiActionId")
                        .IsUnique();

                    b.ToTable("LocalizationSet", t =>
                        {
                            t.Property("GuiActionId")
                                .HasColumnName("DialogGuiActionPrompt_GuiActionId");
                        });

                    b.HasDiscriminator().HasValue("DialogGuiActionPrompt");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Actions.DialogGuiActionTitle", b =>
                {
                    b.HasBaseType("Digdir.Domain.Dialogporten.Domain.Localizations.LocalizationSet");

                    b.Property<Guid>("GuiActionId")
                        .HasColumnType("uuid");

                    b.HasIndex("GuiActionId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("DialogGuiActionTitle");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Activities.DialogActivityDescription", b =>
                {
                    b.HasBaseType("Digdir.Domain.Dialogporten.Domain.Localizations.LocalizationSet");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uuid");

                    b.HasIndex("ActivityId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("DialogActivityDescription");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Contents.DialogContentValue", b =>
                {
                    b.HasBaseType("Digdir.Domain.Dialogporten.Domain.Localizations.LocalizationSet");

                    b.Property<Guid>("DialogContentId")
                        .HasColumnType("uuid");

                    b.HasIndex("DialogContentId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("DialogContentValue");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Transmissions.Contents.DialogTransmissionContentValue", b =>
                {
                    b.HasBaseType("Digdir.Domain.Dialogporten.Domain.Localizations.LocalizationSet");

                    b.Property<Guid>("TransmissionContentId")
                        .HasColumnType("uuid");

                    b.HasIndex("TransmissionContentId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("DialogTransmissionContentValue");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Actors.Actor", b =>
                {
                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Actors.ActorType", "ActorType")
                        .WithMany()
                        .HasForeignKey("ActorTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActorType");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Attachments.AttachmentUrl", b =>
                {
                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Attachments.Attachment", "Attachment")
                        .WithMany("Urls")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Attachments.AttachmentUrlConsumerType", "ConsumerType")
                        .WithMany()
                        .HasForeignKey("ConsumerTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("ConsumerType");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Actions.DialogApiAction", b =>
                {
                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.DialogEntity", "Dialog")
                        .WithMany("ApiActions")
                        .HasForeignKey("DialogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dialog");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Actions.DialogApiActionEndpoint", b =>
                {
                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Actions.DialogApiAction", "Action")
                        .WithMany("Endpoints")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Http.HttpVerb", "HttpMethod")
                        .WithMany()
                        .HasForeignKey("HttpMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("HttpMethod");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Actions.DialogGuiAction", b =>
                {
                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.DialogEntity", "Dialog")
                        .WithMany("GuiActions")
                        .HasForeignKey("DialogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Http.HttpVerb", "HttpMethod")
                        .WithMany()
                        .HasForeignKey("HttpMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Actions.DialogGuiActionPriority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dialog");

                    b.Navigation("HttpMethod");

                    b.Navigation("Priority");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Activities.DialogActivity", b =>
                {
                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.DialogEntity", "Dialog")
                        .WithMany("Activities")
                        .HasForeignKey("DialogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Activities.DialogActivity", "RelatedActivity")
                        .WithMany("RelatedActivities")
                        .HasForeignKey("RelatedActivityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Transmissions.DialogTransmission", "Transmission")
                        .WithMany("Activities")
                        .HasForeignKey("TransmissionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Activities.DialogActivityType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dialog");

                    b.Navigation("RelatedActivity");

                    b.Navigation("Transmission");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Contents.DialogContent", b =>
                {
                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.DialogEntity", "Dialog")
                        .WithMany("Content")
                        .HasForeignKey("DialogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Contents.DialogContentType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dialog");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.DialogEntity", b =>
                {
                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.DialogStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.DialogSearchTag", b =>
                {
                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.DialogEntity", "Dialog")
                        .WithMany("SearchTags")
                        .HasForeignKey("DialogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dialog");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.DialogSeenLog", b =>
                {
                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.DialogEntity", "Dialog")
                        .WithMany("SeenLog")
                        .HasForeignKey("DialogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.DialogUserType", "EndUserType")
                        .WithMany()
                        .HasForeignKey("EndUserTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dialog");

                    b.Navigation("EndUserType");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Transmissions.Contents.DialogTransmissionContent", b =>
                {
                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Transmissions.DialogTransmission", "Transmission")
                        .WithMany("Content")
                        .HasForeignKey("TransmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Transmissions.Contents.DialogTransmissionContentType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Transmission");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Transmissions.DialogTransmission", b =>
                {
                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.DialogEntity", "Dialog")
                        .WithMany("Transmissions")
                        .HasForeignKey("DialogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Transmissions.DialogTransmission", "RelatedTransmission")
                        .WithMany("RelatedTransmissions")
                        .HasForeignKey("RelatedTransmissionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Transmissions.DialogTransmissionType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dialog");

                    b.Navigation("RelatedTransmission");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Localizations.Localization", b =>
                {
                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Localizations.LocalizationSet", "LocalizationSet")
                        .WithMany("Localizations")
                        .HasForeignKey("LocalizationSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocalizationSet");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Outboxes.OutboxMessageConsumer", b =>
                {
                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Outboxes.OutboxMessage", "OutboxMessage")
                        .WithMany("OutboxMessageConsumers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OutboxMessage");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Activities.DialogActivityPerformedByActor", b =>
                {
                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Activities.DialogActivity", "Activity")
                        .WithOne("PerformedBy")
                        .HasForeignKey("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Activities.DialogActivityPerformedByActor", "ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.DialogSeenLogSeenByActor", b =>
                {
                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.DialogSeenLog", "DialogSeenLog")
                        .WithOne("SeenBy")
                        .HasForeignKey("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.DialogSeenLogSeenByActor", "DialogSeenLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DialogSeenLog");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Transmissions.DialogTransmissionSenderActor", b =>
                {
                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Transmissions.DialogTransmission", "Transmission")
                        .WithOne("Sender")
                        .HasForeignKey("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Transmissions.DialogTransmissionSenderActor", "TransmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transmission");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.DialogAttachment", b =>
                {
                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.DialogEntity", "Dialog")
                        .WithMany("Attachments")
                        .HasForeignKey("DialogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dialog");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Transmissions.DialogTransmissionAttachment", b =>
                {
                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Transmissions.DialogTransmission", "Transmission")
                        .WithMany("Attachments")
                        .HasForeignKey("TransmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transmission");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Attachments.AttachmentDisplayName", b =>
                {
                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Attachments.Attachment", "Attachment")
                        .WithOne("DisplayName")
                        .HasForeignKey("Digdir.Domain.Dialogporten.Domain.Attachments.AttachmentDisplayName", "AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Actions.DialogGuiActionPrompt", b =>
                {
                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Actions.DialogGuiAction", "GuiAction")
                        .WithOne("Prompt")
                        .HasForeignKey("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Actions.DialogGuiActionPrompt", "GuiActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuiAction");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Actions.DialogGuiActionTitle", b =>
                {
                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Actions.DialogGuiAction", "GuiAction")
                        .WithOne("Title")
                        .HasForeignKey("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Actions.DialogGuiActionTitle", "GuiActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuiAction");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Activities.DialogActivityDescription", b =>
                {
                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Activities.DialogActivity", "Activity")
                        .WithOne("Description")
                        .HasForeignKey("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Activities.DialogActivityDescription", "ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Contents.DialogContentValue", b =>
                {
                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Contents.DialogContent", "DialogContent")
                        .WithOne("Value")
                        .HasForeignKey("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Contents.DialogContentValue", "DialogContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DialogContent");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Transmissions.Contents.DialogTransmissionContentValue", b =>
                {
                    b.HasOne("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Transmissions.Contents.DialogTransmissionContent", "TransmissionContent")
                        .WithOne("Value")
                        .HasForeignKey("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Transmissions.Contents.DialogTransmissionContentValue", "TransmissionContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransmissionContent");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Attachments.Attachment", b =>
                {
                    b.Navigation("DisplayName");

                    b.Navigation("Urls");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Actions.DialogApiAction", b =>
                {
                    b.Navigation("Endpoints");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Actions.DialogGuiAction", b =>
                {
                    b.Navigation("Prompt");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Activities.DialogActivity", b =>
                {
                    b.Navigation("Description");

                    b.Navigation("PerformedBy")
                        .IsRequired();

                    b.Navigation("RelatedActivities");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Contents.DialogContent", b =>
                {
                    b.Navigation("Value")
                        .IsRequired();
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.DialogEntity", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("ApiActions");

                    b.Navigation("Attachments");

                    b.Navigation("Content");

                    b.Navigation("GuiActions");

                    b.Navigation("SearchTags");

                    b.Navigation("SeenLog");

                    b.Navigation("Transmissions");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.DialogSeenLog", b =>
                {
                    b.Navigation("SeenBy")
                        .IsRequired();
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Transmissions.Contents.DialogTransmissionContent", b =>
                {
                    b.Navigation("Value")
                        .IsRequired();
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Dialogs.Entities.Transmissions.DialogTransmission", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Attachments");

                    b.Navigation("Content");

                    b.Navigation("RelatedTransmissions");

                    b.Navigation("Sender")
                        .IsRequired();
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Localizations.LocalizationSet", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Digdir.Domain.Dialogporten.Domain.Outboxes.OutboxMessage", b =>
                {
                    b.Navigation("OutboxMessageConsumers");
                });
#pragma warning restore 612, 618
        }
    }
}
