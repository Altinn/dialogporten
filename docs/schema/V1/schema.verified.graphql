schema {
  query: Queries
}

interface DialogByIdError {
  message: String!
}

interface SearchDialogError {
  message: String!
}

type Activity {
  id: UUID!
  createdAt: DateTime
  extendedType: URL
  type: ActivityType!
  relatedActivityId: UUID
  performedBy: Actor!
  description: [Localization!]!
}

type Actor {
  actorType: ActorType
  actorId: String
  actorName: String
}

type ApiAction {
  id: UUID!
  action: String!
  authorizationAttribute: String
  isAuthorized: Boolean!
  endpoints: [ApiActionEndpoint!]!
}

type ApiActionEndpoint {
  id: UUID!
  version: String
  url: URL!
  httpMethod: HttpVerb!
  documentationUrl: URL
  requestSchema: URL
  responseSchema: URL
  deprecated: Boolean!
  sunsetAt: DateTime
}

type Attachment {
  id: UUID!
  displayName: [Localization!]!
  urls: [AttachmentUrl!]!
}

type AttachmentUrl {
  id: UUID!
  url: URL!
  consumerType: AttachmentUrlConsumer!
}

type AuthorizedParty {
  party: String!
  name: String!
  partyType: String!
  isDeleted: Boolean!
  hasKeyRole: Boolean!
  isMainAdministrator: Boolean!
  isAccessManager: Boolean!
  hasOnlyAccessToSubParties: Boolean!
  subParties: [AuthorizedParty!]
}

type Content {
  type: ContentType!
  value: [Localization!]!
  mediaType: String
}

type Dialog {
  id: UUID!
  revision: UUID!
  org: String!
  serviceResource: String!
  serviceResourceType: String!
  party: String!
  progress: Int
  extendedStatus: String
  externalReference: String
  visibleFrom: DateTime
  dueAt: DateTime
  expiresAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  dialogToken: String
  status: DialogStatus!
  content: [Content!]!
  attachments: [Attachment!]!
  guiActions: [GuiAction!]!
  apiActions: [ApiAction!]!
  activities: [Activity!]!
  seenSinceLastUpdate: [SeenLog!]!
}

type DialogByIdDeleted implements DialogByIdError {
  message: String!
}

type DialogByIdForbidden implements DialogByIdError {
  message: String!
}

type DialogByIdNotFound implements DialogByIdError {
  message: String!
}

type DialogByIdPayload {
  dialog: Dialog
  errors: [DialogByIdError!]!
}

type GuiAction {
  id: UUID!
  action: String!
  url: URL!
  authorizationAttribute: String
  isAuthorized: Boolean!
  isDeleteDialogAction: Boolean!
  priority: GuiActionPriority!
  httpMethod: HttpVerb!
  title: [Localization!]!
  prompt: [Localization!]
}

type Localization {
  value: String!
  languageCode: String!
}

type Queries @authorize(policy: "enduser") {
  dialogById(dialogId: UUID!): DialogByIdPayload!
  searchDialogs(input: SearchDialogInput!): SearchDialogsPayload!
  parties: [AuthorizedParty!]!
}

type SearchDialog {
  id: UUID!
  org: String!
  serviceResource: String!
  serviceResourceType: String!
  party: String!
  progress: Int
  guiAttachmentCount: Int
  extendedStatus: String
  createdAt: DateTime!
  updatedAt: DateTime!
  dueAt: DateTime
  status: DialogStatus!
  latestActivity: Activity
  content: [Content!]!
  seenSinceLastUpdate: [SeenLog!]!
}

type SearchDialogForbidden implements SearchDialogError {
  message: String!
}

type SearchDialogValidationError implements SearchDialogError {
  message: String!
}

type SearchDialogsPayload {
  items: [SearchDialog!]
  hasNextPage: Boolean!
  continuationToken: String
  orderBy: String
  errors: [SearchDialogError!]!
}

type SeenLog {
  id: UUID!
  seenAt: DateTime!
  seenBy: Actor!
  isCurrentEndUser: Boolean!
}

input SearchDialogInput {
  "Filter by one or more service owner codes"
  org: [String!]
  "Filter by one or more service resources"
  serviceResource: [String!]
  "Filter by one or more owning parties"
  party: [String!]
  "Filter by one or more extended statuses"
  extendedStatus: [String!]
  "Filter by external reference"
  externalReference: String
  "Filter by status"
  status: [DialogStatus!]
  "Only return dialogs created after this date"
  createdAfter: DateTime
  "Only return dialogs created before this date"
  createdBefore: DateTime
  "Only return dialogs updated after this date"
  updatedAfter: DateTime
  "Only return dialogs updated before this date"
  updatedBefore: DateTime
  "Only return dialogs with due date after this date"
  dueAfter: DateTime
  "Only return dialogs with due date before this date"
  dueBefore: DateTime
  "Search string for free text search. Will attempt to fuzzily match in all free text fields in the aggregate"
  search: String
  "Limit free text search to texts with this language code, e.g. 'no', 'en'. Culture codes will be normalized to neutral language codes (ISO 639). Default: search all culture codes"
  searchLanguageCode: String
}

enum ActivityType {
  "Refers to a dialog that has been created."
  DIALOG_CREATED
  "Refers to a dialog that has been completed."
  DIALOG_COMPLETED
  "Refers to a dialog that has been closed."
  DIALOG_CLOSED
  "Information from the service provider, not (directly) related to any transmission."
  INFORMATION
  "Refers to a transmission that has been opened."
  TRANSMISSION_OPENED
  "Indicates that payment has been made."
  PAYMENT_MADE
  "Indicates that a signature has been provided."
  SIGNATURE_PROVIDED
}

enum ActorType {
  PARTY_REPRESENTATIVE
  SERVICE_OWNER
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

enum AttachmentUrlConsumer {
  GUI
  API
}

enum ContentType {
  TITLE
  SENDER_NAME
  SUMMARY
  ADDITIONAL_INFO
  EXTENDED_STATUS
  MAIN_CONTENT_REFERENCE
}

enum DialogStatus {
  "The dialogue is considered new. Typically used for simple messages that do not require any interaction, or as an initial step for dialogues. This is the default."
  NEW
  "Started. In a serial process, this is used to indicate that, for example, a form filling is ongoing."
  IN_PROGRESS
  "Equivalent to \"InProgress\", but will be used by the workspace\/frontend for display purposes."
  SIGNING
  "For processing by the service owner. In a serial process, this is used after a submission is made."
  PROCESSING
  "Used to indicate that the dialogue is in progress\/under work, but is in a state where the user must do something - for example, correct an error, or other conditions that hinder further processing."
  REQUIRES_ATTENTION
  "The dialogue was completed. This typically means that the dialogue is moved to a GUI archive or similar."
  COMPLETED
}

enum GuiActionPriority {
  PRIMARY
  SECONDARY
  TERTIARY
}

enum HttpVerb {
  GET
  POST
  PUT
  PATCH
  DELETE
  HEAD
  OPTIONS
  TRACE
  CONNECT
}

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the authorize directive shall be applied.By default the authorize directives are applied during the validation phase." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on OBJECT | FIELD_DEFINITION

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

scalar URL @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc3986")

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")
