name: CI/CD Staging

run-name: CI/CD Staging ${{ github.event.client_payload.version && format('({0})', github.event.client_payload.version) || '' }}

on:
  workflow_dispatch:
  repository_dispatch:
    types: [release_created]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}

jobs:
  get-versions-from-github:
    name: Get Latest Deployed Version Info from GitHub
    uses: ./.github/workflows/workflow-get-latest-deployed-version-info-from-github.yml
    with:
      environment: staging
    secrets:
      GH_TOKEN: ${{ secrets.RELEASE_VERSION_STORAGE_PAT }}

  check-for-changes:
    name: Check for changes
    needs: [get-versions-from-github]
    uses: ./.github/workflows/workflow-check-for-changes.yml
    with:
      infra_base_sha: ${{ needs.get-versions-from-github.outputs.infra_version_sha }}
      apps_base_sha: ${{ needs.get-versions-from-github.outputs.apps_version_sha }}

  get-current-version:
    name: Get current version
    uses: ./.github/workflows/workflow-get-current-version.yml

  deploy-infra:
    name: Deploy infra to staging
    if: ${{ github.event_name == 'workflow_dispatch' || needs.check-for-changes.outputs.hasInfraChanges == 'true' }}
    needs: [get-current-version, check-for-changes]
    uses: ./.github/workflows/workflow-deploy-infra.yml
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_SOURCE_KEY_VAULT_NAME: ${{ secrets.AZURE_SOURCE_KEY_VAULT_NAME }}
      AZURE_SOURCE_KEY_VAULT_SUBSCRIPTION_ID: ${{ secrets.AZURE_SOURCE_KEY_VAULT_SUBSCRIPTION_ID }}
      AZURE_SOURCE_KEY_VAULT_RESOURCE_GROUP: ${{ secrets.AZURE_SOURCE_KEY_VAULT_RESOURCE_GROUP }}
      AZURE_SOURCE_KEY_VAULT_SSH_JUMPER_SSH_PUBLIC_KEY: ${{ secrets.AZURE_SOURCE_KEY_VAULT_SSH_JUMPER_SSH_PUBLIC_KEY }}
    with:
      environment: staging
      region: norwayeast
      version: ${{ needs.get-current-version.outputs.version }}

  store-infra-version:
    name: Store Latest Deployed Infra Version as GitHub Variable
    needs: [deploy-infra, get-current-version]
    if: ${{ needs.deploy-infra.result == 'success' }}
    uses: ./.github/workflows/workflow-store-github-env-variable.yml
    with:
      variable_name: LATEST_DEPLOYED_INFRA_VERSION
      variable_value: ${{ needs.get-current-version.outputs.version }}
      environment: staging
    secrets:
      GH_TOKEN: ${{ secrets.RELEASE_VERSION_STORAGE_PAT }}

  deploy-apps:
    name: Deploy apps to staging
    needs:
      [get-current-version, check-for-changes, deploy-infra]
    if: ${{ always() && !failure() && !cancelled() && (github.event_name == 'workflow_dispatch' || needs.check-for-changes.outputs.hasBackendChanges == 'true') }}
    uses: ./.github/workflows/workflow-deploy-apps.yml
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_RESOURCE_GROUP_NAME: ${{ secrets.AZURE_RESOURCE_GROUP_NAME }}
      AZURE_ENVIRONMENT_KEY_VAULT_NAME: ${{ secrets.AZURE_ENVIRONMENT_KEY_VAULT_NAME }}
      AZURE_CONTAINER_APP_ENVIRONMENT_NAME: ${{ secrets.AZURE_CONTAINER_APP_ENVIRONMENT_NAME }}
      AZURE_APP_INSIGHTS_CONNECTION_STRING: ${{ secrets.AZURE_APP_INSIGHTS_CONNECTION_STRING }}
      AZURE_APP_CONFIGURATION_NAME: ${{ secrets.AZURE_APP_CONFIGURATION_NAME }}
      AZURE_SERVICE_BUS_NAMESPACE_NAME: ${{ secrets.AZURE_SERVICE_BUS_NAMESPACE_NAME }}
    with:
      environment: staging
      region: norwayeast
      version: ${{ needs.get-current-version.outputs.version }}
      runMigration: ${{ github.event_name == 'workflow_dispatch' || needs.check-for-changes.outputs.hasMigrationChanges == 'true' }}

  publish-sdk-to-nuget:
    uses: ./.github/workflows/workflow-publish-nuget.yml
    needs: [ get-current-version, check-for-changes ]
    if: ${{ needs.check-for-changes.outputs.hasBackendChanges == 'true' || needs.check-for-changes.outputs.hasTestChanges == 'true' }}
    with:
      version: ${{ needs.get-current-version.outputs.version }}
      path: 'src/Digdir.Library.Dialogporten.WebApiClient/Digdir.Library.Dialogporten.WebApiClient.csproj'
      source: 'https://api.nuget.org/v3/index.json'
    secrets:
      NUGET_API_KEY: ${{ secrets.NUGET_API_TEST_KEY }}
  
  store-apps-version:
    name: Store Latest Deployed Apps Version as GitHub Variable
    needs: [deploy-apps, get-current-version]
    if: ${{ always() && !failure() && (github.event_name == 'workflow_dispatch' || needs.deploy-apps.outputs.deployment_executed == 'true') }}
    uses: ./.github/workflows/workflow-store-github-env-variable.yml
    with:
      variable_name: LATEST_DEPLOYED_APPS_VERSION
      variable_value: ${{ needs.get-current-version.outputs.version }}
      environment: staging
    secrets:
      GH_TOKEN: ${{ secrets.RELEASE_VERSION_STORAGE_PAT }}

  publish-schema-npm:
    name: Publish schema npm package
    needs: [check-for-changes, get-current-version, deploy-apps]
    if: ${{ always() && !failure() && !cancelled() && (github.event_name == 'workflow_dispatch' || needs.check-for-changes.outputs.hasSchemaChanges == 'true') }}
    uses: ./.github/workflows/workflow-publish-schema.yml
    with:
      version: ${{ needs.get-current-version.outputs.version }}
    secrets:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  run-e2e-tests:
    name: "Run K6 functional end-to-end tests"
    # we want the end-to-end tests to be dependent on deployment of infrastructure and apps, but if infrastructure is skipped, we still want to run the tests
    if: ${{ always() && !failure() && !cancelled() && (github.event_name == 'workflow_dispatch' || needs.check-for-changes.outputs.hasBackendChanges == 'true') }}
    needs: [deploy-apps, check-for-changes]
    uses: ./.github/workflows/workflow-run-k6-tests.yml
    secrets:
      TOKEN_GENERATOR_USERNAME: ${{ secrets.TOKEN_GENERATOR_USERNAME }}
      TOKEN_GENERATOR_PASSWORD: ${{ secrets.TOKEN_GENERATOR_PASSWORD }}
    with:
      environment: staging
      apiVersion: v1
      testSuitePath: tests/k6/suites/all-single-pass.js
    permissions:
      checks: write
      pull-requests: write

  send-slack-message-on-failure:
    name: Send Slack message on failure
    needs: [deploy-infra, deploy-apps, run-e2e-tests, publish-schema-npm]
    if: ${{ always() && failure() && !cancelled() }}
    uses: ./.github/workflows/workflow-send-ci-cd-status-slack-message.yml
    with:
      environment: staging
      infra_status: ${{ needs.deploy-infra.result }}
      apps_status: ${{ needs.deploy-apps.result }}
      e2e_tests_status: ${{ needs.run-e2e-tests.result }}
      schema_npm_status: ${{ needs.publish-schema-npm.result }}
    secrets:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID_FOR_CI_CD_STATUS }}
