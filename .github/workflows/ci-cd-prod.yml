name: CI/CD Production

on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}

jobs:
  get-versions-from-github:
    name: Get Latest Deployed Version Info from GitHub
    uses: ./.github/workflows/workflow-get-latest-deployed-version-info-from-github.yml
    with:
      environment: prod
    secrets:
      GH_TOKEN: ${{ secrets.RELEASE_VERSION_STORAGE_PAT }}

  check-for-changes:
    name: Check for changes
    needs: [get-versions-from-github]
    uses: ./.github/workflows/workflow-check-for-changes.yml
    with:
      infra_base_sha: ${{ needs.get-versions-from-github.outputs.infra_version_sha }}
      apps_base_sha: ${{ needs.get-versions-from-github.outputs.apps_version_sha }}

  get-current-version:
    name: Get current version
    uses: ./.github/workflows/workflow-get-current-version.yml
  
  dry-run-deploy-infra:
    name: Dry run deploy infra to prod
    if: ${{ github.event_name == 'workflow_dispatch' || needs.check-for-changes.outputs.hasInfraChanges == 'true' }}
    needs: [get-current-version, check-for-changes]
    uses: ./.github/workflows/workflow-deploy-infra.yml
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_SOURCE_KEY_VAULT_NAME: ${{ secrets.AZURE_SOURCE_KEY_VAULT_NAME }}
      AZURE_SOURCE_KEY_VAULT_SUBSCRIPTION_ID: ${{ secrets.AZURE_SOURCE_KEY_VAULT_SUBSCRIPTION_ID }}
      AZURE_SOURCE_KEY_VAULT_RESOURCE_GROUP: ${{ secrets.AZURE_SOURCE_KEY_VAULT_RESOURCE_GROUP }}
      AZURE_SOURCE_KEY_VAULT_SSH_JUMPER_SSH_PUBLIC_KEY: ${{ secrets.AZURE_SOURCE_KEY_VAULT_SSH_JUMPER_SSH_PUBLIC_KEY }}
    with:
      environment: prod
      region: norwayeast
      version: ${{ needs.get-current-version.outputs.version }}
      dryRun: true

  deploy-infra:
    name: Deploy infra to prod
    if: ${{ github.event_name == 'workflow_dispatch' || needs.check-for-changes.outputs.hasInfraChanges == 'true' }}
    needs: [get-current-version, check-for-changes, dry-run-deploy-infra]
    uses: ./.github/workflows/workflow-deploy-infra.yml
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_SOURCE_KEY_VAULT_NAME: ${{ secrets.AZURE_SOURCE_KEY_VAULT_NAME }}
      AZURE_SOURCE_KEY_VAULT_SUBSCRIPTION_ID: ${{ secrets.AZURE_SOURCE_KEY_VAULT_SUBSCRIPTION_ID }}
      AZURE_SOURCE_KEY_VAULT_RESOURCE_GROUP: ${{ secrets.AZURE_SOURCE_KEY_VAULT_RESOURCE_GROUP }}
      AZURE_SOURCE_KEY_VAULT_SSH_JUMPER_SSH_PUBLIC_KEY: ${{ secrets.AZURE_SOURCE_KEY_VAULT_SSH_JUMPER_SSH_PUBLIC_KEY }}
    with:
      environment: prod
      region: norwayeast
      version: ${{ needs.get-current-version.outputs.version }}

  store-infra-version:
    name: Store Latest Deployed Infra Version as GitHub Variable
    needs: [deploy-infra, get-current-version]
    if: ${{ needs.deploy-infra.result == 'success' }}
    uses: ./.github/workflows/workflow-store-github-env-variable.yml
    with:
      variable_name: LATEST_DEPLOYED_INFRA_VERSION
      variable_value: ${{ needs.get-current-version.outputs.version }}
      environment: prod
    secrets:
      GH_TOKEN: ${{ secrets.RELEASE_VERSION_STORAGE_PAT }}

  dry-run-deploy-apps:
    name: Dry run deploy apps to prod
    needs:
      [get-current-version, check-for-changes, deploy-infra]
    # we want deployment of apps to be dependent on deployment of infrastructure, but if infrastructure is skipped, we still want to dry-run deploy the apps
    if: ${{ always() && !failure() && !cancelled() && (github.event_name == 'workflow_dispatch' || needs.check-for-changes.outputs.hasBackendChanges == 'true') }}
    uses: ./.github/workflows/workflow-deploy-apps.yml
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      # todo: consider resolving these in another way since they are created in the infra-step
      AZURE_RESOURCE_GROUP_NAME: ${{ secrets.AZURE_RESOURCE_GROUP_NAME }}
      AZURE_ENVIRONMENT_KEY_VAULT_NAME: ${{ secrets.AZURE_ENVIRONMENT_KEY_VAULT_NAME }}
      AZURE_CONTAINER_APP_ENVIRONMENT_NAME: ${{ secrets.AZURE_CONTAINER_APP_ENVIRONMENT_NAME }}
      AZURE_APP_INSIGHTS_CONNECTION_STRING: ${{ secrets.AZURE_APP_INSIGHTS_CONNECTION_STRING }}
      AZURE_APP_CONFIGURATION_NAME: ${{ secrets.AZURE_APP_CONFIGURATION_NAME }}
      AZURE_SERVICE_BUS_NAMESPACE_NAME: ${{ secrets.AZURE_SERVICE_BUS_NAMESPACE_NAME }}
    with:
      environment: prod
      region: norwayeast
      version: ${{ needs.get-current-version.outputs.version }}
      dryRun: true
      runMigration: ${{ github.event_name == 'workflow_dispatch' || needs.check-for-changes.outputs.hasMigrationChanges == 'true' }}
  
  deploy-apps:
    name: Deploy apps to prod
    needs:
      [get-current-version, check-for-changes, dry-run-deploy-apps]
    if: ${{ github.event_name == 'workflow_dispatch' || needs.check-for-changes.outputs.hasBackendChanges == 'true' }}
    uses: ./.github/workflows/workflow-deploy-apps.yml
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      # todo: consider resolving these in another way since they are created in the infra-step
      AZURE_RESOURCE_GROUP_NAME: ${{ secrets.AZURE_RESOURCE_GROUP_NAME }}
      AZURE_ENVIRONMENT_KEY_VAULT_NAME: ${{ secrets.AZURE_ENVIRONMENT_KEY_VAULT_NAME }}
      AZURE_CONTAINER_APP_ENVIRONMENT_NAME: ${{ secrets.AZURE_CONTAINER_APP_ENVIRONMENT_NAME }}
      AZURE_APP_INSIGHTS_CONNECTION_STRING: ${{ secrets.AZURE_APP_INSIGHTS_CONNECTION_STRING }}
      AZURE_APP_CONFIGURATION_NAME: ${{ secrets.AZURE_APP_CONFIGURATION_NAME }}
      AZURE_SERVICE_BUS_NAMESPACE_NAME: ${{ secrets.AZURE_SERVICE_BUS_NAMESPACE_NAME }}
    with:
      environment: prod
      region: norwayeast
      version: ${{ needs.get-current-version.outputs.version }}
      runMigration: ${{ github.event_name == 'workflow_dispatch' || needs.check-for-changes.outputs.hasMigrationChanges == 'true' }}

  store-apps-version:
    name: Store Latest Deployed Apps Version as GitHub Variable
    needs: [deploy-apps, get-current-version]
    if: ${{ needs.deploy-apps.result == 'success' }}
    uses: ./.github/workflows/workflow-store-github-env-variable.yml
    with:
      variable_name: LATEST_DEPLOYED_APPS_VERSION
      variable_value: ${{ needs.get-current-version.outputs.version }}
      environment: prod
    secrets:
      GH_TOKEN: ${{ secrets.RELEASE_VERSION_STORAGE_PAT }}

  deploy-slack-notifier:
    name: Deploy slack notifier (prod)
    needs: [check-for-changes]
    if: ${{ github.event_name == 'workflow_dispatch' || needs.check-for-changes.outputs.hasSlackNotifierChanges == 'true' }}
    uses: ./.github/workflows/workflow-deploy-function.yml
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      # todo: resolve this automatically, or use tags
      AZURE_FUNCTION_APP_NAME: ${{ secrets.AZURE_SLACK_NOTIFIER_FUNCTION_APP_NAME }}
    with:
      function-app-name: "slack-notifier"
      function-project-path: "./src/Digdir.Tool.Dialogporten.SlackNotifier"
      environment: prod

  # run-e2e-tests:
  #   name: "Run K6 functional end-to-end tests"
  #   # we want the end-to-end tests to be dependent on deployment of infrastructure and apps, but if infrastructure is skipped, we still want to run the tests
  #   if: ${{ always() && !failure() && !cancelled() && (github.event_name == 'workflow_dispatch' || needs.check-for-changes.outputs.hasBackendChanges == 'true') }}
  #   needs: [deploy-apps, check-for-changes]
  #   uses: ./.github/workflows/workflow-run-k6-tests.yml
  #   secrets:
  #     TOKEN_GENERATOR_USERNAME: ${{ secrets.TOKEN_GENERATOR_USERNAME }}
  #     TOKEN_GENERATOR_PASSWORD: ${{ secrets.TOKEN_GENERATOR_PASSWORD }}
  #   with:
  #     environment: prod
  #     apiVersion: v1
  #     testSuitePath: tests/k6/suites/all-single-pass.js
  #   permissions:
  #     checks: write
  #     pull-requests: write

  send-slack-message-on-failure:
    name: Send Slack message on failure
    needs: [deploy-infra, deploy-apps, deploy-slack-notifier]
    if: ${{ always() && failure() && !cancelled() }}
    uses: ./.github/workflows/workflow-send-ci-cd-status-slack-message.yml
    with:
      environment: prod
      infra_status: ${{ needs.deploy-infra.result }}
      apps_status: ${{ needs.deploy-apps.result }}
      slack_notifier_status: ${{ needs.deploy-slack-notifier.result }}
    secrets:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID_FOR_CI_CD_STATUS }}
