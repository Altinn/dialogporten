schema {
  query: Queries
  mutation: Mutations
  subscription: Subscriptions
}

interface DialogByIdError {
  message: String!
}

interface SearchDialogError {
  message: String!
}

interface SetSystemLabelError {
  message: String!
}

type Activity {
  id: UUID!
  createdAt: DateTime
  extendedType: URL
  type: ActivityType!
  transmissionId: UUID
  performedBy: Actor!
  description: [Localization!]!
}

type Actor {
  actorType: ActorType
  actorId: String
  actorName: String
}

type ApiAction {
  id: UUID!
  action: String!
  authorizationAttribute: String
  isAuthorized: Boolean!
  endpoints: [ApiActionEndpoint!]!
}

type ApiActionEndpoint {
  id: UUID!
  version: String
  url: URL!
  httpMethod: HttpVerb!
  documentationUrl: URL
  requestSchema: URL
  responseSchema: URL
  deprecated: Boolean!
  sunsetAt: DateTime
}

type Attachment {
  id: UUID!
  displayName: [Localization!]!
  urls: [AttachmentUrl!]!
}

type AttachmentUrl {
  id: UUID!
  url: URL!
  mediaType: String
  consumerType: AttachmentUrlConsumer!
}

type AuthorizedParty {
  subParties: [AuthorizedSubParty!]
  party: String!
  name: String!
  partyType: String!
  isDeleted: Boolean!
  hasKeyRole: Boolean!
  isCurrentEndUser: Boolean!
  isMainAdministrator: Boolean!
  isAccessManager: Boolean!
  hasOnlyAccessToSubParties: Boolean!
}

type AuthorizedSubParty {
  party: String!
  name: String!
  partyType: String!
  isDeleted: Boolean!
  hasKeyRole: Boolean!
  isCurrentEndUser: Boolean!
  isMainAdministrator: Boolean!
  isAccessManager: Boolean!
  hasOnlyAccessToSubParties: Boolean!
}

type Content {
  title: ContentValue!
  summary: ContentValue!
  senderName: ContentValue
  additionalInfo: ContentValue
  extendedStatus: ContentValue
  mainContentReference: ContentValue
}

type ContentValue {
  value: [Localization!]!
  mediaType: String!
}

type Dialog {
  id: UUID!
  revision: UUID!
  org: String!
  serviceResource: String!
  serviceResourceType: String!
  party: String!
  progress: Int
  process: String
  precedingProcess: String
  extendedStatus: String
  externalReference: String
  visibleFrom: DateTime
  dueAt: DateTime
  expiresAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  dialogToken: String
  systemLabel: SystemLabel!
  status: DialogStatus!
  content: Content!
  attachments: [Attachment!]!
  guiActions: [GuiAction!]!
  apiActions: [ApiAction!]!
  activities: [Activity!]!
  seenSinceLastUpdate: [SeenLog!]!
  transmissions: [Transmission!]!
}

type DialogByIdDeleted implements DialogByIdError {
  message: String!
}

type DialogByIdForbidden implements DialogByIdError {
  message: String!
}

type DialogByIdNotFound implements DialogByIdError {
  message: String!
}

type DialogByIdPayload {
  dialog: Dialog
  errors: [DialogByIdError!]!
}

type DialogEventPayload {
  id: UUID!
  type: DialogEventType!
}

type GuiAction {
  id: UUID!
  action: String!
  url: URL!
  authorizationAttribute: String
  isAuthorized: Boolean!
  isDeleteDialogAction: Boolean!
  priority: GuiActionPriority!
  httpMethod: HttpVerb!
  title: [Localization!]!
  prompt: [Localization!]
}

type Localization {
  value: String!
  languageCode: String!
}

type Mutations {
  setSystemLabel(input: SetSystemLabelInput!): SetSystemLabelPayload!
}

type Queries @authorize(policy: "enduser") {
  dialogById(dialogId: UUID!): DialogByIdPayload!
  searchDialogs(input: SearchDialogInput!): SearchDialogsPayload!
  parties: [AuthorizedParty!]!
}

type SearchContent {
  title: ContentValue!
  summary: ContentValue!
  senderName: ContentValue
  extendedStatus: ContentValue
}

type SearchDialog {
  id: UUID!
  org: String!
  serviceResource: String!
  serviceResourceType: String!
  party: String!
  progress: Int
  process: String
  precedingProcess: String
  guiAttachmentCount: Int
  extendedStatus: String
  createdAt: DateTime!
  updatedAt: DateTime!
  dueAt: DateTime
  status: DialogStatus!
  systemLabel: SystemLabel!
  latestActivity: Activity
  content: SearchContent!
  seenSinceLastUpdate: [SeenLog!]!
}

type SearchDialogForbidden implements SearchDialogError {
  message: String!
}

"Set only one property per object. If more than one property is set, there is no guarantee which one will be used."
type SearchDialogSortType {
  createdAt: SortDirection
  updatedAt: SortDirection
  dueAt: SortDirection
}

type SearchDialogValidationError implements SearchDialogError {
  message: String!
}

type SearchDialogsPayload {
  items: [SearchDialog!]
  hasNextPage: Boolean!
  "Use this token to fetch the next page of dialogs, must be used in combination with OrderBy"
  continuationToken: String
  "Use this OrderBy to fetch the next page of dialogs, must be used in combination with ContinuationToken"
  orderBy: [SearchDialogSortType!]!
  errors: [SearchDialogError!]!
}

type SeenLog {
  id: UUID!
  seenAt: DateTime!
  seenBy: Actor!
  isCurrentEndUser: Boolean!
}

type SetSystemLabelEntityNotFound implements SetSystemLabelError {
  message: String!
}

type SetSystemLabelPayload {
  success: Boolean!
  errors: [SetSystemLabelError!]!
}

type Subscriptions {
  "Requires a dialog token in the 'DigDir-Dialog-Token' header."
  dialogEvents(dialogId: UUID!): DialogEventPayload! @authorize(policy: "enduserSubscription", apply: VALIDATION)
}

type Transmission {
  id: UUID!
  createdAt: DateTime!
  authorizationAttribute: String
  isAuthorized: Boolean!
  extendedType: URL
  relatedTransmissionId: UUID
  type: TransmissionType!
  sender: Actor!
  content: TransmissionContent!
  attachments: [Attachment!]!
}

type TransmissionContent {
  title: ContentValue!
  summary: ContentValue!
  contentReference: ContentValue
}

input SearchDialogInput {
  "Filter by one or more service owner codes"
  org: [String!]
  "Filter by one or more service resources"
  serviceResource: [String!]
  "Filter by one or more owning parties"
  party: [String!]
  "Filter by one or more extended statuses"
  extendedStatus: [String!]
  "Filter by external reference"
  externalReference: String
  "Filter by status"
  status: [DialogStatus!]
  "Only return dialogs created after this date"
  createdAfter: DateTime
  "Only return dialogs created before this date"
  createdBefore: DateTime
  "Only return dialogs updated after this date"
  updatedAfter: DateTime
  "Only return dialogs updated before this date"
  updatedBefore: DateTime
  "Only return dialogs with due date after this date"
  dueAfter: DateTime
  "Only return dialogs with due date before this date"
  dueBefore: DateTime
  "Search string for free text search. Will attempt to fuzzily match in all free text fields in the aggregate"
  search: String
  "Limit free text search to texts with this language code, e.g. 'nb', 'en'. Culture codes will be normalized to neutral language codes (ISO 639). Default: search all culture codes"
  searchLanguageCode: String
  "Limit the number of results returned, defaults to 100, max 1000"
  limit: Int
  "Continuation token for pagination"
  continuationToken: String
  "Sort the results by one or more fields"
  orderBy: [SearchDialogSortTypeInput!]
}

"Set only one property per object. If more than one property is set, there is no guarantee which one will be used."
input SearchDialogSortTypeInput {
  createdAt: SortDirection
  updatedAt: SortDirection
  dueAt: SortDirection
}

input SetSystemLabelInput {
  dialogId: UUID!
  label: SystemLabel!
}

enum ActivityType {
  "Indicates that a dialog has been created."
  DIALOG_CREATED
  "Indicates that a dialog has been closed."
  DIALOG_CLOSED
  "Information from the service provider, not (directly) related to any transmission."
  INFORMATION
  "Indicates that a transmission has been opened."
  TRANSMISSION_OPENED
  "Indicates that payment has been made."
  PAYMENT_MADE
  "Indicates that a signature has been provided."
  SIGNATURE_PROVIDED
  "Indicates that a dialog has been opened."
  DIALOG_OPENED
  "Indicates that a dialog has been deleted."
  DIALOG_DELETED
  "Indicates that a dialog has been restored."
  DIALOG_RESTORED
  "Indicates that a dialog has been sent to signing."
  SENT_TO_SIGNING
  "Indicates that a dialog has been sent to form fill."
  SENT_TO_FORM_FILL
  "Indicates that a dialog has been sent to send in."
  SENT_TO_SEND_IN
  "Indicates that a dialog has been sent to payment."
  SENT_TO_PAYMENT
}

enum ActorType {
  PARTY_REPRESENTATIVE
  SERVICE_OWNER
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

enum AttachmentUrlConsumer {
  GUI
  API
}

enum DialogEventType {
  DIALOG_UPDATED
  DIALOG_DELETED
}

enum DialogStatus {
  "The dialogue is considered new. Typically used for simple messages that do not require any interaction, or as an initial step for dialogues. This is the default."
  NEW
  "Started. In a serial process, this is used to indicate that, for example, a form filling is ongoing."
  IN_PROGRESS
  "Used to indicate user-initiated dialogs not yet sent."
  DRAFT
  "Sent by the service owner. In a serial process, this is used after a submission is made."
  SENT
  "Used to indicate that the dialogue is in progress\/under work, but is in a state where the user must do something - for example, correct an error, or other conditions that hinder further processing."
  REQUIRES_ATTENTION
  "The dialogue was completed. This typically means that the dialogue is moved to a GUI archive or similar."
  COMPLETED
}

enum GuiActionPriority {
  PRIMARY
  SECONDARY
  TERTIARY
}

enum HttpVerb {
  GET
  POST
  PUT
  PATCH
  DELETE
  HEAD
  OPTIONS
  TRACE
  CONNECT
}

enum SortDirection {
  ASC
  DESC
}

enum SystemLabel {
  DEFAULT
  BIN
  ARCHIVE
}

enum TransmissionType {
  "For general information, not related to any submissions"
  INFORMATION
  "Feedback\/receipt accepting a previous submission"
  ACCEPTANCE
  "Feedback\/error message rejecting a previous submission"
  REJECTION
  "Question\/request for more information"
  REQUEST
  "Critical information about the process"
  ALERT
  "Information about a formal decision (\"resolution\")"
  DECISION
  "A normal submission of some information\/form"
  SUBMISSION
  "A submission correcting\/overriding some previously submitted information"
  CORRECTION
}

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the authorize directive shall be applied.By default the authorize directives are applied during the validation phase." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on OBJECT | FIELD_DEFINITION

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

scalar URL @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc3986")

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")
